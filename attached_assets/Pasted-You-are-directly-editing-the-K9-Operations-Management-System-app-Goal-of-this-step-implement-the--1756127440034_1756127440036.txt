You are directly editing the K9 Operations Management System app.
Goal of this step: implement the **Breeding ▸ Feeding** section end‑to‑end (models, migration, CRUD UI, APIs, permissions, navigation). 
You are fully responsible for every edit.

INTENT (what and why)
- Capture both the **weekly feeding plan** and the **per‑meal feeding log** requested by operations (Arabic RTL).
- Plan = for a dog across the week (day, meal type, quantity, prep, supplements, body condition score, notes).
- Log = per meal event: dog code, time, meal type (fresh/dry via checkboxes), meal name, prep method (e.g., boiled), grams, drinking water amount, supplements (name + quantity), and notes.
- This enables later reports (daily/weekly feeding sheet) and KPIs.

===========================
STEP 1 — MODELS + MIGRATION
===========================
Open models.py and append:

# Enums
class MealType(enum.Enum):
    FRESH = "FRESH"   # طازج
    DRY = "DRY"       # مجفف

class PrepMethod(enum.Enum):
    BOILED = "BOILED"           # غليان
    STEAMED = "STEAMED"         # تبخير
    SOAKED = "SOAKED"           # نقع (للمجفف)
    RAW_OTHER = "RAW_OTHER"     # أخرى (نيء/خلطات)

class DayOfWeek(enum.Enum):
    MON = "MON"; TUE = "TUE"; WED = "WED"; THU = "THU"; FRI = "FRI"; SAT = "SAT"; SUN = "SUN"

# Optional: Body Condition Score (1–9) if you use 1..9 scale
class BodyConditionScale(enum.Enum):
    BCS1 = "BCS1"; BCS2 = "BCS2"; BCS3 = "BCS3"; BCS4 = "BCS4"; BCS5 = "BCS5"; BCS6 = "BCS6"; BCS7 = "BCS7"; BCS8 = "BCS8"; BCS9 = "BCS9"

# FeedingPlan: planned meals per dog & weekday (used for weekly planning UI)
class FeedingPlan(db.Model):
    __tablename__ = "feeding_plan"
    id = db.Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    project_id = db.Column(UUID(as_uuid=True), db.ForeignKey("project.id", ondelete="CASCADE"), nullable=False)
    dog_id = db.Column(UUID(as_uuid=True), db.ForeignKey("dog.id", ondelete="CASCADE"), nullable=False)
    day_of_week = db.Column(db.Enum(DayOfWeek), nullable=False)
    meal_time = db.Column(db.Time, nullable=False)                 # زمن الوجبة
    meal_type = db.Column(db.Enum(MealType), nullable=False)       # طازج/مجفف (checkboxes in UI)
    meal_name = db.Column(db.String(120), nullable=True)           # اسم الوجبة (مثلاً دجاج/رز/درای كيبل)
    prep_method = db.Column(db.Enum(PrepMethod), nullable=True)    # طريقة التحضير (غليان/…)
    planned_grams = db.Column(db.Integer, nullable=True)           # الكمية بالجرام
    planned_water_ml = db.Column(db.Integer, nullable=True)        # ماء الشرب بالمللي
    supplements = db.Column(db.JSON, nullable=True)                # [{"name":"Omega3","qty":"5ml"}]
    bcs = db.Column(db.Enum(BodyConditionScale), nullable=True)    # كتلة الجسد (اختياري)
    notes = db.Column(db.Text, nullable=True)

    created_at = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, nullable=False, default=datetime.utcnow, onupdate=datetime.utcnow)

    __table_args__ = (
        sa.Index("ix_feeding_plan_project_dog_day", "project_id", "dog_id", "day_of_week"),
    )

# FeedingLog: actual intakes per dog/meal/time (operational capture)
class FeedingLog(db.Model):
    __tablename__ = "feeding_log"
    id = db.Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    project_id = db.Column(UUID(as_uuid=True), db.ForeignKey("project.id", ondelete="CASCADE"), nullable=False)
    date = db.Column(db.Date, nullable=False)
    time = db.Column(db.Time, nullable=False)

    dog_id = db.Column(UUID(as_uuid=True), db.ForeignKey("dog.id", ondelete="CASCADE"), nullable=False)
    recorder_employee_id = db.Column(UUID(as_uuid=True), db.ForeignKey("employee.id", ondelete="SET NULL"), nullable=True)

    meal_type_fresh = db.Column(db.Boolean, nullable=False, default=False)  # checkbox طازج
    meal_type_dry = db.Column(db.Boolean, nullable=False, default=False)    # checkbox مجفف
    meal_name = db.Column(db.String(120), nullable=True)                    # اسم الوجبة
    prep_method = db.Column(db.Enum(PrepMethod), nullable=True)             # طريقة التحضير

    grams = db.Column(db.Integer, nullable=True)                            # كمية الوجبة (جرام)
    water_ml = db.Column(db.Integer, nullable=True)                         # ماء الشرب (مللي)

    supplements = db.Column(db.JSON, nullable=True)                         # [{"name":"VitC","qty":"2g"}]
    notes = db.Column(db.Text, nullable=True)

    created_by_user_id = db.Column(db.Integer, db.ForeignKey("user.id", ondelete="SET NULL"), nullable=True)
    created_at = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, nullable=False, default=datetime.utcnow, onupdate=datetime.utcnow)

    __table_args__ = (
        sa.Index("ix_feeding_log_project_date", "project_id", "date"),
        sa.Index("ix_feeding_log_dog_datetime", "dog_id", "date", "time"),
    )

Create migration migrations/versions/xxxx_feeding.py:
- Create enums (MealType, PrepMethod, DayOfWeek, BodyConditionScale).
- Create tables feeding_plan and feeding_log with indexes above.
- Downgrade must drop indexes, tables, enums.

================
STEP 2 — PERMISSIONS
================
Add permission keys and seed defaults:
- Feeding Plan:  "feeding_plan:view", "feeding_plan:create", "feeding_plan:edit", "feeding_plan:delete"
- Feeding Log:   "feeding_log:view",  "feeding_log:create",  "feeding_log:edit",  "feeding_log:delete"

GENERAL_ADMIN: grant all.
PROJECT_MANAGER: grant all “view/create/edit” in their projects, delete optional.

========================================
STEP 3 — NAVIGATION (Arabic RTL structure)
========================================
In the main navbar (templates base or partial):
- Add parent menu **"التربية"** (Breeding).
  Under it add two items:
  - **"التغذية — الخطة الأسبوعية"** → `/breeding/feeding/plan`
  - **"التغذية — السجل اليومي"** → `/breeding/feeding/log`

(Keep RTL and active states consistent with the rest of the app.)

========================================
STEP 4 — ROUTES (UI pages)
========================================
In routes.py, add these @login_required pages:

# Feeding Plan UI
GET  /breeding/feeding/plan            (perm "feeding_plan:view")  → render `templates/breeding/feeding_plan.html`
GET  /breeding/feeding/plan/new        (perm "feeding_plan:create")→ render `templates/breeding/feeding_plan_form.html`
GET  /breeding/feeding/plan/<id>/edit  (perm "feeding_plan:edit")  → render same form

# Feeding Log UI
GET  /breeding/feeding/log             (perm "feeding_log:view")   → render `templates/breeding/feeding_log.html`
GET  /breeding/feeding/log/new         (perm "feeding_log:create") → render `templates/breeding/feeding_log_form.html`
GET  /breeding/feeding/log/<id>/edit   (perm "feeding_log:edit")   → render same form

Templates must receive project/dog selectors filtered by user scope (PROJECT_MANAGER → only assigned projects).

========================================
STEP 5 — APIs (CRUD + list with filters)
========================================
In api_routes.py, add these @login_required endpoints and enforce PM scoping:

# Feeding Plan
GET  /api/breeding/feeding/plan/list?project_id&dog_id&day_of_week&page=1&per_page=50
POST /api/breeding/feeding/plan
PUT  /api/breeding/feeding/plan/<id>
DELETE /api/breeding/feeding/plan/<id>

# Feeding Log
GET  /api/breeding/feeding/log/list?project_id&date_from&date_to&dog_id&page=1&per_page=50
POST /api/breeding/feeding/log
PUT  /api/breeding/feeding/log/<id>
DELETE /api/breeding/feeding/log/<id>

Responses:
- list returns: { items:[...], pagination:{...}, kpis:{ total, grams_sum, water_sum, supplements_count } }
- create/update returns the created/updated row JSON.

Use eager loading (joinedload/selectinload) for Dog and Project. Validate inputs; return 400/403/404 as appropriate.

========================================
STEP 6 — TEMPLATES (Arabic RTL, reversed columns)
========================================
Create:

templates/breeding/feeding_plan.html
- RTL page. Filters: project, dog, day_of_week.
- Table headers (RIGHT → LEFT order):
  ["اليوم","زمن الوجبة","نوع الوجبة (طازج/مجفف)","اسم الوجبة","طريقة التحضير","الكمية (غم)","ماء الشرب (مل)","مكملات غذائية","كتلة الجسد","ملاحظات","الكلب","المشروع","إجراءات"]
- Buttons: “إضافة خطة” → /breeding/feeding/plan/new
- Include /static/js/feeding_plan.js

templates/breeding/feeding_plan_form.html
- RTL form with fields for all FeedingPlan columns (checkbox UI for meal type? For plan we can use a single-select meal_type).
- Supplements input supports adding multiple rows (name + qty).
- Save via fetch to POST/PUT.

templates/breeding/feeding_log.html
- RTL page. Filters: project, date range, dog.
- KPIs badges: إجمالي عدد السجلات، مجموع غرامات الطعام، مجموع ماء الشرب، عدد المكملات.
- Table headers (RIGHT → LEFT order):
  ["التاريخ","الوقت","نوع الوجبة (طازج/مجفف)","اسم الوجبة","طريقة التحضير","الكمية (غم)","ماء الشرب (مل)","مكملات غذائية","ملاحظات","الكلب","المشروع","إجراءات"]
- “إضافة سجل” → /breeding/feeding/log/new
- Include /static/js/feeding_log.js

templates/breeding/feeding_log_form.html
- RTL form with:
  project, date, time, dog, (checkboxes) طازج/مجفف, meal_name, prep_method, grams, water_ml, supplements (name + qty), notes.
- Save via fetch.

========================================
STEP 7 — STATIC JS (minimal, vanilla fetch)
========================================
Create:
- static/js/feeding_plan.js
  - Loads list via /api/breeding/feeding/plan/list
  - Handles pagination, filters, delete
- static/js/feeding_log.js
  - Loads list via /api/breeding/feeding/log/list
  - Handles filters, KPIs, delete
Both must include CSRF token usage like the rest of the app.

========================================
STEP 8 — VALIDATION & BUSINESS RULES
========================================
- PROJECT_MANAGER can only see/create/edit for their assigned projects.
- grams/water_ml must be non‑negative integers.
- If both meal_type_fresh and meal_type_dry are false in FeedingLog, reject with 400.
- When both are true, allow (mixed meal).
- Supplements must be a list of {"name": str, "qty": str}; reject malformed.
- For FeedingPlan, (project_id, dog_id, day_of_week, meal_time) should be unique → add UniqueConstraint.

Add to FeedingPlan.__table_args__:
UniqueConstraint("project_id","dog_id","day_of_week","meal_time", name="uq_feeding_plan_slot")

========================================
STEP 9 — TESTS
========================================
Add tests:
- tests/test_feeding_plan_crud.py
  * create project/dog; POST new plan row; GET list; PUT edit; DELETE.
- tests/test_feeding_log_crud.py
  * create several logs across a date range; GET list; verify KPIs sums.

========================================
IMPORTANT RTL NOTE
========================================
- In ALL tables (HTML) render columns **RIGHT → LEFT** (reverse the header/row arrays) so the first Arabic header is at the right edge.
