You are directly editing the K9 Operations Management System app.

OBJECTIVE
- Create a new top-level section **Breeding (التربية)** for routine care, distinct from Production (الإنتاج).
- Under Breeding, scaffold these tabs:
  1) التغذية — السجل اليومي (Feeding Log)  ← Implement FULLY now
  2) الفحص الظاهري اليومي (Daily Checkup)   ← Placeholder page only (coming soon)
  3) البراز / البول / القيء (Excretion)      ← Placeholder page only
  4) العناية (الاستحمام والصيانة) (Grooming) ← Placeholder page only
  5) جرعة الديدان (Deworming)                 ← Placeholder page only
  6) تدريب — أنشطة يومية (Training Activity)  ← Placeholder page only
  7) النظافة (البيئة/القفص) (Cleaning)        ← Placeholder page only
- Do NOT add a weekly feeding plan UI; we’ll do a **weekly feeding report later**.
- Everything user‑visible is ARABIC, RTL; reverse column order in tables so the first header is on the right.

================================================
STEP 1 — MODEL & MIGRATION (Feeding Log only)
================================================
Open models.py and APPEND:

# ---------- Enums with ARABIC VALUES ----------
class PrepMethod(enum.Enum):
    BOILED = "غليان"
    STEAMED = "تبخير"
    SOAKED = "نقع"
    OTHER = "أخرى"

class BodyConditionScale(enum.Enum):  # optional per meal if noted
    VERY_THIN   = "نحيف جدًا (1)"
    THIN        = "نحيف (2)"
    BELOW_IDEAL = "أقل من المثالي (3)"
    NEAR_IDEAL  = "قريب من المثالي (4)"
    IDEAL       = "مثالي (5)"
    ABOVE_IDEAL = "فوق المثالي (6)"
    FULL        = "ممتلئ (7)"
    OBESE       = "سمين (8)"
    VERY_OBESE  = "سمين جدًا (9)"

# ---------- FeedingLog table (per‑meal) ----------
class FeedingLog(db.Model):
    __tablename__ = "feeding_log"

    id = db.Column(UUID(as_uuid=True), primary_key=True, default=uuid4)

    project_id = db.Column(UUID(as_uuid=True), db.ForeignKey("project.id", ondelete="CASCADE"), nullable=False)
    date = db.Column(db.Date, nullable=False)
    time = db.Column(db.Time, nullable=False)

    dog_id = db.Column(UUID(as_uuid=True), db.ForeignKey("dog.id", ondelete="CASCADE"), nullable=False)
    recorder_employee_id = db.Column(UUID(as_uuid=True), db.ForeignKey("employee.id", ondelete="SET NULL"), nullable=True)

    # Meal type — checkboxes (both can be True if mixed)
    meal_type_fresh = db.Column(db.Boolean, nullable=False, default=False)  # طازج
    meal_type_dry   = db.Column(db.Boolean, nullable=False, default=False)  # مجفف

    meal_name   = db.Column(db.String(120), nullable=True)                 # اسم الوجبة
    prep_method = db.Column(db.Enum(PrepMethod), nullable=True)            # طريقة التحضير (Arabic values)

    grams    = db.Column(db.Integer, nullable=True)                        # كمية الوجبة (غم)
    water_ml = db.Column(db.Integer, nullable=True)                        # ماء الشرب (مل)

    supplements   = db.Column(db.JSON, nullable=True)                      # [{"name":"اسم المكمل","qty":"5 مل"}]
    body_condition = db.Column(db.Enum(BodyConditionScale), nullable=True) # كتلة الجسم (Arabic values)
    notes = db.Column(db.Text, nullable=True)

    created_by_user_id = db.Column(db.Integer, db.ForeignKey("user.id", ondelete="SET NULL"), nullable=True)
    created_at = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, nullable=False, default=datetime.utcnow, onupdate=datetime.utcnow)

    __table_args__ = (
        sa.Index("ix_feeding_log_project_date", "project_id", "date"),
        sa.Index("ix_feeding_log_dog_datetime", "dog_id", "date", "time"),
    )

Create Alembic migration `migrations/versions/xxxx_breeding_feeding_log.py`:
- Create Postgres enums for PrepMethod and BodyConditionScale using the **ARABIC strings above**. Provide SQLite fallback via VARCHAR if needed.
- Create `feeding_log` table and both indexes exactly as defined.
- Downgrade must drop indexes, table, and enums safely.

=====================
STEP 2 — PERMISSIONS
=====================
Add and seed these permission keys:
- "breeding:menu"                         # to show Breeding menu
- "feeding_log:view", "feeding_log:create", "feeding_log:edit", "feeding_log:delete"

Rules:
- GENERAL_ADMIN: grant all.
- PROJECT_MANAGER: grant breeding:menu + feeding_log:view/create/edit for assigned projects; delete optional.

================================================
STEP 3 — NAVIGATION (Arabic, RTL, new parent)
================================================
In the main navbar template/partial:
- Add a new top-level menu **"التربية"** (Breeding).
  Under it add:
  - **"التغذية — السجل اليومي"** → `/breeding/feeding/log`
  - **"الفحص الظاهري اليومي"**   → `/breeding/checkup`          (placeholder)
  - **"البراز / البول / القيء"**  → `/breeding/excretion`        (placeholder)
  - **"العناية (الاستحمام)"**    → `/breeding/grooming`         (placeholder)
  - **"جرعة الديدان"**           → `/breeding/deworming`        (placeholder)
  - **"تدريب — أنشطة يومية"**    → `/breeding/training-activity`(placeholder)
  - **"النظافة (البيئة/القفص)"**  → `/breeding/cleaning`         (placeholder)
- Only show the “التربية” menu if the user has "breeding:menu" OR any breeding sub‑permission.

=====================================
STEP 4 — ROUTES (UI pages, routes.py)
=====================================
Add these @login_required pages; protect with permissions noted:

# FULL (implemented now)
GET  /breeding/feeding/log            → render `templates/breeding/feeding_log.html`      (perm "feeding_log:view")
GET  /breeding/feeding/log/new        → render `templates/breeding/feeding_log_form.html` (perm "feeding_log:create")
GET  /breeding/feeding/log/<id>/edit  → render same form                                  (perm "feeding_log:edit")

# PLACEHOLDERS (simple “coming soon” pages; no logic yet)
GET  /breeding/checkup            → render `templates/breeding/_placeholder.html` with title "الفحص الظاهري اليومي"
GET  /breeding/excretion          → render `templates/breeding/_placeholder.html` with title "البراز / البول / القيء"
GET  /breeding/grooming           → render `templates/breeding/_placeholder.html` with title "العناية (الاستحمام)"
GET  /breeding/deworming          → render `templates/breeding/_placeholder.html` with title "جرعة الديدان"
GET  /breeding/training-activity  → render `templates/breeding/_placeholder.html` with title "تدريب — أنشطة يومية"
GET  /breeding/cleaning           → render `templates/breeding/_placeholder.html` with title "النظافة (البيئة/القفص)"

Each page must receive the page title, and show a short Arabic list of the fields we will capture later (from the client’s description) so the team knows what’s coming.

===========================================
STEP 5 — APIs (CRUD + list, api_routes.py)
===========================================
Add @login_required endpoints; enforce PM scoping (PROJECT_MANAGER can only access assigned projects):

GET  /api/breeding/feeding/log/list?project_id&date_from&date_to&dog_id&page=1&per_page=50
- Requires "feeding_log:view"
- Returns:
  {
    "items":[ {row JSON…with Arabic enum strings} ],
    "pagination": {...},
    "kpis": {
      "total": <int>,
      "grams_sum": <int or 0>,
      "water_sum": <int or 0>,
      "supplements_count": <int>  // sum of supplement list lengths
    }
  }

POST /api/breeding/feeding/log         (requires "feeding_log:create")
- Body validation:
  - project_id (uuid, required; PM must own)
  - date (YYYY-MM-DD, required)
  - time (HH:MM or HH:MM:SS, required → normalize seconds to :00 if omitted)
  - dog_id (uuid, required)
  - meal_type_fresh or meal_type_dry must be True (at least one)
  - grams, water_ml >= 0 if provided
  - supplements must be a list of {"name": <str>, "qty": <str>} (Arabic allowed)
  - prep_method ∈ {"غليان","تبخير","نقع","أخرى"} or null
  - body_condition ∈ Arabic BCS values above or null
- Return the created row JSON (Arabic values intact).

PUT  /api/breeding/feeding/log/<id>    (requires "feeding_log:edit")
DELETE /api/breeding/feeding/log/<id>  (requires "feeding_log:delete")

Use eager loading (joinedload/selectinload) for Dog and Project.

=========================================
STEP 6 — TEMPLATES (Arabic RTL, reversed)
=========================================
Create:

1) templates/breeding/feeding_log.html
- Arabic RTL list page.
- Filters: المشروع (project), المدة (date_from/date_to), الكلب.
- KPI badges: إجمالي السجلات، مجموع الغرامات، مجموع ماء الشرب، عدد المكملات.
- Table headers in **RIGHT → LEFT order** (reverse arrays so the first header appears on the right):
  ["التاريخ","الوقت","نوع الوجبة (طازج/مجفف)","اسم الوجبة","طريقة التحضير","الكمية (غم)","ماء الشرب (مل)","مكملات غذائية","كتلة الجسم","ملاحظات","الكلب","المشروع","إجراءات"]
- Button: "إضافة سجل" → /breeding/feeding/log/new
- Include `/static/js/feeding_log.js`

2) templates/breeding/feeding_log_form.html
- Arabic RTL form with:
  - المشروع (select), التاريخ (date), الوقت (time), الكلب (select)
  - نوع الوجبة: checkboxes طازج / مجفف (both allowed)
  - اسم الوجبة (text), طريقة التحضير (select: غليان/تبخير/نقع/أخرى)
  - الكمية بالجرام (int), ماء الشرب بالمللي (int)
  - مكملات غذائية: dynamic rows (الاسم + الكمية)
  - كتلة الجسم (select — Arabic labels above), ملاحظات (textarea)
- Submit via fetch to POST/PUT with CSRF.
- Show inline Arabic validation errors.

3) templates/breeding/_placeholder.html
- Simple Arabic RTL page:
  - H1 = the title passed by the route.
  - Short Arabic paragraph listing the future fields for that tab (from the client’s definition) so users know what is planned.
  - A muted note: "هذه الصفحة قيد التنفيذ".

======================================
STEP 7 — STATIC JS (vanilla, CSRF)
======================================
Create `/static/js/feeding_log.js`:
- On list page: load via GET /api/breeding/feeding/log/list, render rows + KPI badges; support filters, pagination, and delete with confirm.
- On form page: add/remove supplement rows; submit JSON to POST/PUT; redirect back to list.
- Include CSRF token consistently with the rest of the app.

========================================
STEP 8 — BUSINESS RULES & SANITY CHECKS
========================================
- PROJECT_MANAGER can only list/create/edit logs for their assigned projects.
- At least one of meal_type_fresh / meal_type_dry must be True.
- grams and water_ml must be non‑negative integers (or null).
- Normalize time to include seconds (:00) if user entered HH:MM.
- Supplements must be [{"name": str, "qty": str}] — reject malformed payloads with a clear Arabic error.

================
STEP 9 — TESTS
================
Add `tests/test_breeding_feeding_log.py`:
- Seed project, dog, and a PM user assigned to that project.
- Create multiple logs across two dates (mix fresh/dry, supplements).
- GET list with filters; assert items length and KPI sums (grams_sum, water_sum, supplements_count).
- PUT to edit a row; assert updated.
- DELETE a row (if permission granted).

========================
IMPORTANT RTL NOTE
========================
In ALL Breeding tables, **reverse the column order** so the first Arabic header appears at the RIGHT edge (best for Arabic reading). Keep all UI labels and stored enum values in **ARABIC**.
