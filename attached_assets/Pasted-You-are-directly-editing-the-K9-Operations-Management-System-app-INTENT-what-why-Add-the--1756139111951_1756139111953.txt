You are directly editing the K9 Operations Management System app.

INTENT (what & why)
- Add the **Daily Checkup** tab under Breeding (routine care).
- Capture a quick, structured daily visual exam per dog: eyes, ears, nose, forelimbs, hindlimbs, coat, tail, plus optional symptoms/diagnosis/treatment notes consistent with the paper health report. (Arabic UI & enums; RTL). 
- This prepares clean data for future health reports and cross-refs with Veterinary visits. (The legacy daily health sheet uses فحص/الأعراض/التشخيص/العلاج fields, which we mirror here). 
  // Reference: daily health report fields include "الفحص" , "الأعراض المرضية", "التشخيص", "العلاج". 
  // Keep future-friendly but simple for now. 
  // (Arabic structure present in uploaded health sheet). 

================================================
STEP 1 — MODEL & MIGRATION (models.py + alembic)
================================================
Append to models.py:

import enum
from datetime import datetime
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy import UniqueConstraint
from sqlalchemy import orm as sa

# ---------- Arabic enums (store Arabic strings) ----------
class PartStatus(enum.Enum):
    سليم = "سليم"
    احمرار = "احمرار"
    التهاب = "التهاب"
    إفرازات = "إفرازات"
    تورم = "تورم"
    جرح = "جرح"
    ألم = "ألم"
    أخرى = "أخرى"

class Severity(enum.Enum):
    خفيف = "خفيف"
    متوسط = "متوسط"
    شديد = "شديد"

# ---------- DailyCheckupLog ----------
class DailyCheckupLog(db.Model):
    __tablename__ = "daily_checkup_log"

    id = db.Column(UUID(as_uuid=True), primary_key=True, default=uuid4)

    project_id = db.Column(UUID(as_uuid=True), db.ForeignKey("project.id", ondelete="CASCADE"), nullable=False)
    date = db.Column(db.Date, nullable=False)
    time = db.Column(db.Time, nullable=False)

    dog_id = db.Column(UUID(as_uuid=True), db.ForeignKey("dog.id", ondelete="CASCADE"), nullable=False)
    examiner_employee_id = db.Column(UUID(as_uuid=True), db.ForeignKey("employee.id", ondelete="SET NULL"), nullable=True)

    # Body parts (enum PartStatus + optional notes)
    العين = db.Column(db.Enum(PartStatus), nullable=True)
    الأذن = db.Column(db.Enum(PartStatus), nullable=True)
    الأنف = db.Column(db.Enum(PartStatus), nullable=True)
    الأطراف_الأمامية = db.Column(db.Enum(PartStatus), nullable=True)
    الأطراف_الخلفية = db.Column(db.Enum(PartStatus), nullable=True)
    الشعر = db.Column(db.Enum(PartStatus), nullable=True)
    الذيل = db.Column(db.Enum(PartStatus), nullable=True)

    شدة_الحالة = db.Column(db.Enum(Severity), nullable=True)
    أعراض = db.Column(db.Text, nullable=True)          # الأعراض المرضية إن وجدت
    تشخيص_أولي = db.Column(db.Text, nullable=True)     # تشخيص أولي/ملاحظة
    علاج_مقترح = db.Column(db.Text, nullable=True)     # علاج أو إجراء مقترح
    ملاحظات = db.Column(db.Text, nullable=True)

    created_by_user_id = db.Column(db.Integer, db.ForeignKey("user.id", ondelete="SET NULL"), nullable=True)
    created_at = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, nullable=False, default=datetime.utcnow, onupdate=datetime.utcnow)

    __table_args__ = (
        sa.Index("ix_checkup_project_date", "project_id", "date"),
        sa.Index("ix_checkup_dog_datetime", "dog_id", "date", "time"),
        UniqueConstraint("project_id","dog_id","date","time", name="uq_checkup_project_dog_dt"),
    )

Create Alembic migration `migrations/versions/xxxx_breeding_daily_checkup.py`:
- Create enums PartStatus and Severity (Arabic values).
- Create daily_checkup_log table + indexes + unique constraint.
- Safe downgrade (drop indexes/table/enums). Provide SQLite fallback using VARCHAR if needed.

=====================
STEP 2 — PERMISSIONS
=====================
Add keys & seed:
- "checkup:view", "checkup:create", "checkup:edit", "checkup:delete"

Rules:
- GENERAL_ADMIN: all.
- PROJECT_MANAGER: view/create/edit within assigned projects; delete optional.

================================================
STEP 3 — NAVIGATION (Arabic, RTL)
================================================
In the Breeding menu add/confirm item:
- **"الفحص الظاهري اليومي"** → `/breeding/checkup`

Show Breeding menu when user has any Breeding permissions.

=====================================
STEP 4 — ROUTES (UI pages, routes.py)
=====================================
Add @login_required pages:

GET  /breeding/checkup                 (perm "checkup:view")
  → render `templates/breeding/checkup_list.html`
GET  /breeding/checkup/new             (perm "checkup:create")
  → render `templates/breeding/checkup_form.html`
GET  /breeding/checkup/<id>/edit       (perm "checkup:edit")
  → render same form

Pass to templates:
- visible projects (PM scoped), dogs (optionally filtered by project),
- Arabic choices for PartStatus & Severity.

===========================================
STEP 5 — APIs (CRUD + list, api_routes.py)
===========================================
Add @login_required endpoints; enforce PM scoping:

GET  /api/breeding/checkup/list?project_id&date_from&date_to&dog_id&page=1&per_page=50
- perm: "checkup:view"
- returns:
  {
    "items":[ {... Arabic enum strings ...} ],
    "pagination": {...},
    "kpis": {
      "total": N,
      "flags": {
        "العين": <count where not 'سليم'>,
        "الأذن": ...,
        "الأنف": ...,
        "الأطراف_الأمامية": ...,
        "الأطراف_الخلفية": ...,
        "الشعر": ...,
        "الذيل": ...
      },
      "severity": {"خفيف":X,"متوسط":Y,"شديد":Z}
    }
  }

POST /api/breeding/checkup
- perm: "checkup:create"
- Validate body:
  project_id (uuid, required; PM must own)
  date (YYYY-MM-DD, required)
  time (HH:MM or HH:MM:SS, required → normalize :00)
  dog_id (uuid, required)
  PartStatus fields must be one of: ["سليم","احمرار","التهاب","إفرازات","تورم","جرح","ألم","أخرى"] or null
  Severity ∈ ["خفيف","متوسط","شديد"] or null
  Text fields may be null/empty
- Return created row (Arabic values intact)

PUT  /api/breeding/checkup/<id>   (perm "checkup:edit")
DELETE /api/breeding/checkup/<id> (perm "checkup:delete")

Use joinedload/selectinload for Dog & Project.

=========================================
STEP 6 — TEMPLATES (Arabic RTL, reversed)
=========================================
Create:

1) templates/breeding/checkup_list.html
- RTL filters: المشروع، المدة، الكلب
- KPI badges for severity & flags (see API)
- Table **RIGHT→LEFT column order**:
  [
    "التاريخ",
    "الوقت",
    "العين","الأذن","الأنف",
    "الأطراف الأمامية","الأطراف الخلفية",
    "الشعر","الذيل",
    "شدة الحالة",
    "أعراض",
    "تشخيص أولي",
    "علاج مقترح",
    "الكلب",
    "المشروع",
    "إجراءات"
  ]
- “إضافة فحص” → /breeding/checkup/new
- Include `/static/js/checkup.js`

2) templates/breeding/checkup_form.html
- RTL form groups:
  Scope: المشروع (select), التاريخ (date), الوقت (time), الكلب (select)
  فحص:
    لكل جزء (العين/الأذن/الأنف/الأطراف الأمامية/الأطراف الخلفية/الشعر/الذيل)
    → select PartStatus (Arabic)
  شدة الحالة: select Severity (Arabic)
  أعراض (textarea), تشخيص أولي (textarea), علاج مقترح (textarea), ملاحظات (textarea)
- Submit via fetch to POST/PUT with CSRF and show Arabic validation errors.

======================================
STEP 7 — STATIC JS (vanilla, CSRF)
======================================
Create `/static/js/checkup.js`:
- List page: load via GET /api/breeding/checkup/list, render table + KPI badges; support filters, pagination, delete with confirm.
- Form page: gather selects/textareas; submit JSON to POST/PUT; redirect to list on success.

========================================
STEP 8 — BUSINESS RULES & NOTES
========================================
- PROJECT_MANAGER can only access assigned projects.
- Normalize time to HH:MM:SS.
- In KPIs, a body-part is “flagged” if status != "سليم".
- Prepare for future link-out to Veterinary Visit creation when severity == "شديد" (not implemented here).

================
STEP 9 — TESTS
================
Add `tests/test_breeding_checkup.py`:
- Seed project, dog, PM user.
- Create several checkups with varying PartStatus & Severity.
- GET list with project/date filters; assert pagination and KPI counts.
- PUT edit; assert update.
- DELETE if allowed.

========================
IMPORTANT RTL NOTE
========================
In ALL Breeding tables, **reverse the column order** so the first Arabic header appears at the RIGHT edge.
