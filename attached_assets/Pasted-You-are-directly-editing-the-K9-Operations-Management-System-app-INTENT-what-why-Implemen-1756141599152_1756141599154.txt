You are directly editing the K9 Operations Management System app.

INTENT (what & why)
- Implement the **Excretion** tab under Breeding (routine care).
- Capture, per dog & time, the observed details for:
  • Stool (البراز): color, consistency/shape, content, constipation flag, and place.
  • Urine (البول): color (+ optional notes).
  • Vomit (القيء): color and number of episodes (+ optional notes).
- The client mentioned photos to choose stool shape by checkbox; for now provide **controlled Arabic options** (enums) that cover shapes/consistencies. We can add images later without changing the data model.
- This structured data will feed health reports and alerts.

================================================
STEP 1 — MODEL & MIGRATION (models.py + alembic)
================================================
Open models.py and APPEND the following. Use **Arabic enum values** (DB stores Arabic) while keeping Python identifiers ASCII-safe.

# ---------- Arabic enums (store Arabic strings) ----------
class StoolColor(enum.Enum):
    شفاف_او_فاتح = "شفاف/فاتح"
    اصفر = "أصفر"
    بني = "بني"
    داكن = "داكن"
    اخضر = "أخضر"
    وردي_دموي = "وردي/دموي"
    اخرى = "أخرى"

class StoolConsistency(enum.Enum):
    سائل = "سائل"
    لين = "لين"
    طبيعي_مشكّل = "طبيعي مُشكّل"
    صلب = "صلب"
    شديد_الصلابة = "شديد الصلابة"

# Optional “shape” is often redundant with consistency; we keep one enum above.

class StoolContent(enum.Enum):
    طبيعي = "طبيعي"
    مخاط = "مخاط"
    دم = "دم"
    طفيليات_او_ديدان = "طفيليات/ديدان"
    بقايا_طعام = "بقايا طعام"
    جسم_غريب = "جسم غريب"
    عشب = "عشب"
    اخرى = "أخرى"

class UrineColor(enum.Enum):
    شفاف = "شفاف"
    اصفر_فاتح = "أصفر فاتح"
    اصفر = "أصفر"
    اصفر_غامق = "أصفر غامق"
    بني_مصفر = "بني مصفر"
    وردي_دموي = "وردي/دموي"

class VomitColor(enum.Enum):
    شفاف = "شفاف"
    اصفر = "أصفر"
    بني = "بني"
    اخضر = "أخضر"
    وردي_دموي = "وردي/دموي"
    رغوي = "رغوي"
    اخرى = "أخرى"

class ExcretionPlace(enum.Enum):
    داخل_البيت = "داخل البيت"
    خارج_البيت = "خارج البيت"
    القفص = "القفص"
    المكان_المخصص = "المكان المخصص"
    اخرى = "أخرى"

# ---------- ExcretionLog table (per observation) ----------
class ExcretionLog(db.Model):
    __tablename__ = "excretion_log"

    id = db.Column(UUID(as_uuid=True), primary_key=True, default=uuid4)

    project_id = db.Column(UUID(as_uuid=True), db.ForeignKey("project.id", ondelete="CASCADE"), nullable=False)
    date = db.Column(db.Date, nullable=False)
    time = db.Column(db.Time, nullable=False)

    dog_id = db.Column(UUID(as_uuid=True), db.ForeignKey("dog.id", ondelete="CASCADE"), nullable=False)
    recorder_employee_id = db.Column(UUID(as_uuid=True), db.ForeignKey("employee.id", ondelete="SET NULL"), nullable=True)

    # --- Stool (any may be null if not observed) ---
    stool_color = db.Column(db.Enum(StoolColor), nullable=True)              # لون البراز
    stool_consistency = db.Column(db.Enum(StoolConsistency), nullable=True)  # قوام/شكل البراز
    stool_content = db.Column(db.Enum(StoolContent), nullable=True)          # محتوى البراز
    constipation = db.Column(db.Boolean, nullable=False, default=False)      # إمساك
    stool_place = db.Column(db.Enum(ExcretionPlace), nullable=True)          # مكان التبرز
    stool_notes = db.Column(db.Text, nullable=True)

    # --- Urine ---
    urine_color = db.Column(db.Enum(UrineColor), nullable=True)              # لون البول
    urine_notes = db.Column(db.Text, nullable=True)

    # --- Vomit ---
    vomit_color = db.Column(db.Enum(VomitColor), nullable=True)              # لون القيء
    vomit_count = db.Column(db.Integer, nullable=True)                       # عدد مرات القيء (>=0)
    vomit_notes = db.Column(db.Text, nullable=True)

    # Audit
    created_by_user_id = db.Column(db.Integer, db.ForeignKey("user.id", ondelete="SET NULL"), nullable=True)
    created_at = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, nullable=False, default=datetime.utcnow, onupdate=datetime.utcnow)

    __table_args__ = (
        sa.Index("ix_excretion_project_date", "project_id", "date"),
        sa.Index("ix_excretion_dog_datetime", "dog_id", "date", "time"),
    )

Create Alembic migration `migrations/versions/xxxx_breeding_excretion.py`:
- Create all enums above with **ARABIC string values** (ensure SQLite fallback with VARCHAR if needed).
- Create `excretion_log` table and both indexes exactly as defined.
- Downgrade must drop indexes, table, and enums safely.

=====================
STEP 2 — PERMISSIONS
=====================
Add and seed:
- "excretion:view", "excretion:create", "excretion:edit", "excretion:delete"

Rules:
- GENERAL_ADMIN: all.
- PROJECT_MANAGER: view/create/edit within assigned projects; delete optional.

================================================
STEP 3 — NAVIGATION (Arabic, RTL)
================================================
In the **Breeding (التربية)** parent menu, ensure/append the item:
- **"البراز / البول / القيء"** → `/breeding/excretion`

Only show Breeding if the user has any Breeding permission.

=====================================
STEP 4 — ROUTES (UI pages, routes.py)
=====================================
Add these @login_required pages (protect with permissions):

GET  /breeding/excretion              → render `templates/breeding/excretion_list.html` (perm "excretion:view")
GET  /breeding/excretion/new          → render `templates/breeding/excretion_form.html` (perm "excretion:create")
GET  /breeding/excretion/<id>/edit    → render same form (perm "excretion:edit")

All pages should receive:
- visible projects (scoped for PM), dogs (optionally filtered by project),
- Arabic choices for all enums above.

===========================================
STEP 5 — APIs (CRUD + list, api_routes.py)
===========================================
Add @login_required endpoints; enforce PM scoping:

GET  /api/breeding/excretion/list?project_id&date_from&date_to&dog_id&page=1&per_page=50
- perm: "excretion:view"
- returns:
  {
    "items":[ {... Arabic enum strings ...} ],
    "pagination": {...},
    "kpis": {
      "total": <int>,
      "stool": {
        "abnormal_consistency": <count where stool_consistency IN ["سائل","لين","شديد الصلابة"]>,
        "constipation": <count where constipation = true>,
        "by_consistency": {"سائل":n1,"لين":n2,"طبيعي مُشكّل":n3,"صلب":n4,"شديد الصلابة":n5}
      },
      "urine": {
        "abnormal_color": <count where urine_color IN ["أصفر غامق","بني مصفر","وردي/دموي"]>
      },
      "vomit": {
        "total_events": <sum of vomit_count (null→0)>
      }
    }
  }

POST /api/breeding/excretion
- perm: "excretion:create"
- Validate JSON body:
  - project_id (uuid, required; PM must own)
  - date (YYYY-MM-DD, required)
  - time (HH:MM or HH:MM:SS, required → normalize :00)
  - dog_id (uuid, required)
  - At least **one** of the groups (stool / urine / vomit) must contain data (e.g., a color field or notes or count).
  - Enum fields must be one of the Arabic values listed above or null.
  - vomit_count must be >= 0 if provided.
- Return created row JSON (Arabic values intact).

PUT  /api/breeding/excretion/<id>   (perm "excretion:edit")
DELETE /api/breeding/excretion/<id> (perm "excretion:delete")

Use joinedload/selectinload for Dog & Project. Return 400/403/404 as needed.

=========================================
STEP 6 — TEMPLATES (Arabic RTL, reversed)
=========================================
Create:

1) templates/breeding/excretion_list.html
- Arabic RTL filters: المشروع، المدة، الكلب
- KPI badges for stool/urine/vomit (as defined by API)
- Table headers in **RIGHT → LEFT order** (reverse arrays so first header is rightmost):
  [
    "التاريخ","الوقت",
    "لون البراز","قوام البراز","محتوى البراز","إمساك","مكان التبرز","ملاحظات (براز)",
    "لون البول","ملاحظات (بول)",
    "لون القيء","عدد مرات القيء","ملاحظات (قيء)",
    "الكلب","المشروع","إجراءات"
  ]
- Button: "إضافة سجل" → /breeding/excretion/new
- Include `/static/js/excretion.js`

2) templates/breeding/excretion_form.html
- Arabic RTL form with groups & helper text:
  Scope: المشروع (select)، التاريخ (date)، الوقت (time)، الكلب (select)
  البراز:
    لون البراز (select)، قوام البراز (select)، محتوى البراز (select)، إمساك (checkbox)، مكان التبرز (select)، ملاحظات (textarea)
  البول:
    لون البول (select)، ملاحظات (textarea)
  القيء:
    لون القيء (select)، عدد مرات القيء (int ≥ 0)، ملاحظات (textarea)
- Submit via fetch to POST/PUT with CSRF; show Arabic validation errors.

======================================
STEP 7 — STATIC JS (vanilla, CSRF)
======================================
Create `/static/js/excretion.js`:
- List page: call GET /api/breeding/excretion/list on load and filter changes; render KPI badges and RTL/reversed table; support pagination; handle delete with confirm.
- Form page: collect fields, normalize time to include seconds (:00 if HH:MM), ensure at least one group has data; submit JSON to POST or PUT; redirect to list.

========================================
STEP 8 — BUSINESS RULES & NOTES
========================================
- PROJECT_MANAGER can only access assigned projects.
- At least one of stool/urine/vomit must be present (don’t accept a completely empty observation).
- Treat null as “not observed”; only compute KPIs from non-null fields.
- Abnormal urine colors list is configurable later; for now use the set above.
- In future we may attach stool shape images; keep enums stable to avoid DB migrations.

================
STEP 9 — TESTS
================
Add `tests/test_breeding_excretion.py`:
- Seed project, dog, PM user.
- Create multiple excretion logs across date range:
  * some with only stool, some with only urine, some with vomit (count > 0), and mixes.
- GET list with filters; assert pagination and KPI calculations.
- PUT edit a record; assert fields updated.
- DELETE a record if permission granted.

========================
IMPORTANT RTL NOTE
========================
In ALL Breeding tables, **reverse the column order** so the first Arabic header appears at the RIGHT edge (best for Arabic reading).
