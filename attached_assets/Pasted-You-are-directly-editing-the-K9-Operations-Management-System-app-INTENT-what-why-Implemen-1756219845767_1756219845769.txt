You are directly editing the K9 Operations Management System app.

INTENT (what & why)
- Implement the **Cleaning (النظافة)** tab under Breeding (التربية) to log kennel/house hygiene actions per dog & time.
- Capture: cleaned house, washed house, disinfected house, alternate cage number, alternate place, materials used, and "disinfected houses of a dog group".
- Enforce and visualize the operational cadence:
  • Wash every 3 days
  • Disinfect every 7 days
- All user-visible text **and** stored enum values are **Arabic**; UI is **RTL**; tables are **right→left (reversed columns)**.

================================================
STEP 1 — MODEL & MIGRATION (models.py + alembic)
================================================
Append to models.py. Use ASCII-safe identifiers but **Arabic enum strings** (DB stores Arabic). We’ll keep the record per dog (as requested), with optional group metadata for “group house disinfection”.

import enum
from datetime import datetime, date, timedelta
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy import UniqueConstraint
from sqlalchemy import orm as sa

# ---------- Arabic enums (stored values are Arabic) ----------
class YesNo(enum.Enum):
    نعم = "نعم"
    لا = "لا"

class AreaType(enum.Enum):
    بيت_الكلب = "بيت الكلب"
    القفص = "القفص"
    ساحة_خارجية = "ساحة خارجية"
    منطقة_مشتركة = "منطقة مشتركة"
    اخرى = "أخرى"

# ---------- CleaningLog (per dog action) ----------
class CleaningLog(db.Model):
    __tablename__ = "cleaning_log"

    id = db.Column(UUID(as_uuid=True), primary_key=True, default=uuid4)

    project_id = db.Column(UUID(as_uuid=True), db.ForeignKey("project.id", ondelete="CASCADE"), nullable=False)
    date = db.Column(db.Date, nullable=False)
    time = db.Column(db.Time, nullable=False)

    dog_id = db.Column(UUID(as_uuid=True), db.ForeignKey("dog.id", ondelete="CASCADE"), nullable=False)
    recorder_employee_id = db.Column(UUID(as_uuid=True), db.ForeignKey("employee.id", ondelete="SET NULL"), nullable=True)

    # Target area info
    نوع_المكان = db.Column(db.Enum(AreaType), nullable=True)             # بيت الكلب | القفص | ساحة خارجية | ...
    رقم_البيت_او_القفص = db.Column(db.String(60), nullable=True)         # kennel/cage number (if applicable)
    مكان_بديل = db.Column(db.String(120), nullable=True)                 # alternate place used (نقل مؤقت)

    # Actions (per your spec)
    تنظيف_البيت = db.Column(db.Enum(YesNo), nullable=True)               # sweeping/cleaning
    غسل_البيت = db.Column(db.Enum(YesNo), nullable=True)                  # washing house
    تعقيم_البيت = db.Column(db.Enum(YesNo), nullable=True)                # disinfecting house

    تطهير_بيوت_مجموعة_كلاب = db.Column(db.Enum(YesNo), nullable=True)    # group disinfection flag
    وصف_المجموعة = db.Column(db.String(120), nullable=True)              # e.g., "الصف A" or "مجموعة 1"

    المواد_المستخدمة = db.Column(db.JSON, nullable=True)                 # list like [{"name":"هيبوكلوريت","qty":"100 مل"}]
    ملاحظات = db.Column(db.Text, nullable=True)

    # For cadence computation (not persisted as enums, computed in API)
    created_by_user_id = db.Column(db.Integer, db.ForeignKey("user.id", ondelete="SET NULL"), nullable=True)
    created_at = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, nullable=False, default=datetime.utcnow, onupdate=datetime.utcnow)

    __table_args__ = (
        sa.Index("ix_cleaning_project_date", "project_id", "date"),
        sa.Index("ix_cleaning_dog_datetime", "dog_id", "date", "time"),
        UniqueConstraint("project_id","dog_id","date","time", name="uq_cleaning_project_dog_dt"),
    )

Create Alembic migration `migrations/versions/xxxx_breeding_cleaning.py`:
- Create enums YesNo and AreaType (Arabic values).
- Create `cleaning_log` table and both indexes + unique constraint exactly as defined.
- Safe downgrade (drop indexes/table/enums). Provide SQLite fallback via VARCHAR if needed.

=====================
STEP 2 — PERMISSIONS
=====================
Add and seed:
- "cleaning:view", "cleaning:create", "cleaning:edit", "cleaning:delete"

Rules:
- GENERAL_ADMIN: all.
- PROJECT_MANAGER: view/create/edit within assigned projects; delete optional.

================================================
STEP 3 — NAVIGATION (Arabic, RTL)
================================================
In the **Breeding (التربية)** parent menu, add/confirm:
- **"النظافة (البيئة/القفص)"** → `/breeding/cleaning`

Breeding menu should be visible if user has any Breeding permission.

=====================================
STEP 4 — ROUTES (UI pages, routes.py)
=====================================
Add @login_required pages (protect with permissions):

GET  /breeding/cleaning            → render `templates/breeding/cleaning_list.html` (perm "cleaning:view")
GET  /breeding/cleaning/new        → render `templates/breeding/cleaning_form.html` (perm "cleaning:create")
GET  /breeding/cleaning/<id>/edit  → render same form (perm "cleaning:edit")

Each page must receive:
- Visible projects (PM‑scoped)
- Dogs (optionally filtered by project)
- Arabic choices for YesNo and AreaType.

===========================================
STEP 5 — APIs (CRUD + list, api_routes.py)
===========================================
Add @login_required endpoints; enforce PM scoping:

GET  /api/breeding/cleaning/list?project_id&date_from&date_to&dog_id&page=1&per_page=50
- perm: "cleaning:view"
- returns:
  {
    "items":[ {... Arabic enum strings ...} ],
    "pagination": {...},
    "kpis": {
      "total": <int>,
      "cleaned_yes": <count where تنظيف_البيت == "نعم">,
      "washed_yes": <count where غسل_البيت == "نعم">,
      "disinfected_yes": <count where تعقيم_البيت == "نعم">,
      "group_disinfections": <count where تطهير_بيوت_مجموعة_كلاب == "نعم">,

      // Cadence KPIs for due/overdue by DOG within selected project range
      "due_wash_count": <int>,        // dogs with last wash >= 3 days ago
      "overdue_wash_count": <int>,    // dogs with last wash > 3 days ago
      "due_disinfect_count": <int>,   // dogs with last disinfect >= 7 days ago
      "overdue_disinfect_count": <int>
    }
  }

Implementation of cadence in list handler:
- For each dog found in the filter scope, compute latest "غسل_البيت == نعم" and "تعقيم_البيت == نعم".
- Compute days since last wash/disinfect relative to (date_to or today).
- due_wash if days_since >= 3; overdue_wash if days_since > 3.
- due_disinfect if days_since >= 7; overdue_disinfect if days_since > 7.
- Null “never done” counts as overdue for both.

POST /api/breeding/cleaning
- perm: "cleaning:create"
- Validate JSON body:
  - project_id (uuid, required; PM must own)
  - date (YYYY-MM-DD, required)
  - time (HH:MM or HH:MM:SS, required → normalize :00)
  - dog_id (uuid, required)
  - نوع_المكان ∈ ["بيت الكلب","القفص","ساحة خارجية","منطقة مشتركة","أخرى"] or null
  - التنظيف/الغسل/التعقيم values must be YesNo ∈ ["نعم","لا"] or null
  - If تطهير_بيوت_مجموعة_كلاب == "نعم" and وصف_المجموعة is empty → return 400
  - المواد_المستخدمة must be a list of {"name": str, "qty": str} if provided
- Return the created row JSON (Arabic values intact)

PUT  /api/breeding/cleaning/<id>   (perm "cleaning:edit")
DELETE /api/breeding/cleaning/<id> (perm "cleaning:delete")

Use joinedload/selectinload for Dog & Project. Return 400/403/404 as needed.

=========================================
STEP 6 — TEMPLATES (Arabic RTL, reversed)
=========================================
Create:

1) templates/breeding/cleaning_list.html
- RTL filters: المشروع، المدة، الكلب
- KPI badges showing: cleaned_yes, washed_yes, disinfected_yes, group_disinfections, and the cadence KPIs (due/overdue).
- Table headers in **RIGHT → LEFT order** (reverse arrays so first header is rightmost):
  [
    "التاريخ","الوقت",
    "نوع المكان","رقم البيت/القفص","المكان البديل",
    "تنظيف البيت","غسل البيت","تعقيم البيت",
    "تطهير بيوت مجموعة كلاب","وصف المجموعة",
    "المواد المستخدمة","ملاحظات",
    "الكلب","المشروع","إجراءات"
  ]
- “إضافة نظافة” → /breeding/cleaning/new
- Include `/static/js/cleaning.js`

2) templates/breeding/cleaning_form.html
- RTL form groups:
  Scope: المشروع (select)، التاريخ (date)، الوقت (time)، الكلب (select)
  المكان:
    نوع المكان (select: بيت الكلب/القفص/ساحة خارجية/منطقة مشتركة/أخرى)
    رقم البيت/القفص (text 60)
    المكان البديل (text 120)
  الإجراءات:
    تنظيف البيت (نعم/لا)
    غسل البيت (نعم/لا)
    تعقيم البيت (نعم/لا)
    تطهير بيوت مجموعة كلاب (نعم/لا) + وصف المجموعة (text 120; required if نعم)
  المواد:
    المواد المستخدمة: dynamic rows [{"name": "اسم المادة", "qty":"الكمية"}]
  ملاحظات: textarea
- Submit via fetch to POST/PUT with CSRF; show Arabic validation errors.

======================================
STEP 7 — STATIC JS (vanilla, CSRF)
======================================
Create `/static/js/cleaning.js`:
- List page:
  - Fetch GET /api/breeding/cleaning/list on load & filter changes.
  - Render KPI badges + RTL/reversed table; support pagination; delete with confirm.
- Form page:
  - Manage dynamic materials rows (add/remove).
  - Submit JSON to POST/PUT; redirect to list on success.
- Include CSRF token as elsewhere.

========================================
STEP 8 — BUSINESS RULES & NOTES
========================================
- PROJECT_MANAGER can only access assigned projects.
- Normalize time to HH:MM:SS on save.
- If all three (تنظيف/غسل/تعقيم) are "لا" and no materials/notes provided → reject (400) to avoid empty/no‑op logs.
- Cadence computation:
  - If a dog has **no** prior wash → treat as overdue_wash.
  - If a dog has **no** prior disinfect → treat as overdue_disinfect.
  - Use date_to (if provided) as “today” for the KPI calculation; otherwise use current server date.
- Future: allow scheduled reminders based on next due dates (not in this step).

================
STEP 9 — TESTS
================
Add `tests/test_breeding_cleaning.py`:
- Seed project, dog(s), PM user.
- Create logs across dates covering:
  * cleaning only, washing only, disinfect only, and group disinfection.
  * dogs with no prior wash/disinfect (should count as overdue).
- GET list; assert KPIs (washed_yes, disinfected_yes, due/overdue counts) computed correctly.
- PUT edit; assert updates.
- DELETE if allowed.

========================
IMPORTANT RTL NOTE
========================
In ALL Breeding tables, **reverse the column order** so the first Arabic header appears at the RIGHT edge (best for Arabic reading).
