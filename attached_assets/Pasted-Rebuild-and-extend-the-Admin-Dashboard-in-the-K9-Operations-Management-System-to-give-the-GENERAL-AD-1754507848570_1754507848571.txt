Rebuild and extend the Admin Dashboard in the K9 Operations Management System to give the GENERAL_ADMIN full, detailed, and real-time control over all Project Manager permissions, including:

Top-level module access (e.g., Dogs, Employees, Projects, etc.)

Subsection-level access (e.g., Dogs → Medical Records, Breeding → Heat Cycles)

Permission Types: View / Create / Edit / Delete / Export / Assign / Approve

🔐 Required Structure
🔹 1. Permission Entities and Hierarchy
Rebuild the permission model as a nested structure:

yaml
Copy
Edit
Permissions:
  Dogs:
    - View Dog List
    - View Dog Details
    - Edit Dog Info
    - Upload Medical Records
    - Assign to Project
  Employees:
    - View List
    - Assign to Projects
    - Track Certifications
  Breeding:
    - Access Heat Cycles
    - Mating Records
    - Pregnancy Tracker
    - Puppy Management
  Projects:
    - Create Project
    - Assign Dogs
    - Assign Employees
    - Log Incidents
    - Evaluate Performance
  Attendance:
    - Define Shifts
    - Assign Shifts
    - Record Attendance
    - Export Attendance Reports
  Reports & Exports:
    - Generate PDFs
    - Export CSVs
  Analytics:
    - Access Statistics
    - Filter by Date/Project
Each item above is granular and must be independently toggleable for each Project Manager.

🧩 Functional Modules to Build
✅ 1. Admin Dashboard Panel: “تفويض الصلاحيات”
A new page with a full permissions matrix for each PROJECT_MANAGER.

Sidebar List: All PM users

Main Panel: Matrix grid with toggle switches or checkboxes

Filters: Module / Submodule / Project

Save button triggers backend update and audit log

✅ 2. Permission Model (SQLAlchemy)
python
Copy
Edit
class SubPermission(db.Model):
    __tablename__ = 'sub_permissions'
    id = db.Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    user_id = db.Column(UUID(as_uuid=True), db.ForeignKey('users.id'), nullable=False)
    section = db.Column(db.String(50), nullable=False)       # e.g., "Dogs"
    subsection = db.Column(db.String(100), nullable=False)    # e.g., "Upload Medical Records"
    permission_type = db.Column(db.String(20), nullable=False) # view/edit/delete/export/assign
    project_id = db.Column(UUID(as_uuid=True), db.ForeignKey('projects.id'), nullable=True)
    is_granted = db.Column(db.Boolean, default=False)
✅ 3. Admin Control UI (Bootstrap RTL + JS)
Arabic RTL labels and grouping

Toggle switches (on = granted / off = denied)

Show modules in accordions or tabs for better UX

Allow bulk selection (e.g., “Grant all under Dogs”)

Example UI:

pgsql
Copy
Edit
🐕 Dogs
  ▢ View Dog List            ▢ Edit Dog Info
  ▢ Upload Medical Records   ▢ Assign to Project
✅ 4. Backend Logic (Flask)
Routes:

GET /admin/permissions/full → Returns structured permission map

POST /admin/permissions/update → Accepts updated permissions payload

GET /admin/permissions/user/<user_id> → View existing permissions for user

Helpers:

has_permission(user_id, section, subsection, type, project_id=None)

update_permission(user_id, section, subsection, type, value)

✅ 5. Security Enforcement
In every route or action across the system, wrap with:

python
Copy
Edit
if not has_permission(current_user.id, 'Dogs', 'Upload Medical Records', 'edit', project_id):
    abort(403)
Use decorators for cleaner access control:

python
Copy
Edit
@require_permission('Projects', 'Create Project', 'write')
def create_project():
    ...
✅ 6. Audit Logging
Track every permission update:

python
Copy
Edit
{
  "by": "admin_user_id",
  "target": "pm_user_id",
  "changed": {
    "section": "Dogs",
    "subsection": "Upload Medical Records",
    "permission_type": "edit",
    "from": False,
    "to": True
  },
  "timestamp": "2025-08-06T18:32Z",
  "ip": "192.168.1.5"
}
🧪 Testing & Verification
Add sample PM user with various permission combinations

Use a test-only debug_permissions.py script to simulate role enforcement

Add test buttons (only visible to ADMIN) to “Preview PM View” and validate UI

📤 Optional Exports
Allow admin to export full permission matrix to:

PDF (Arabic RTL with ReportLab)

CSV (for compliance tracking)

✅ Final Goal
Create a powerful, intuitive, and secure permissions engine that gives GENERAL_ADMIN absolute control over who can do what, where, and to which project — from top-level sections to micro-level actions.