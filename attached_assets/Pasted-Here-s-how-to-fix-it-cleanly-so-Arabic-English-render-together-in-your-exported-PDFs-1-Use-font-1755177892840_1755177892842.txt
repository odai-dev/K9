Here’s how to fix it cleanly so Arabic + English render together in your exported PDFs:

1) Use fonts that cover both Arabic and Latin

Pick an Arabic font that includes Latin glyphs (so you don’t need a fallback for most text):

Good single-font options: Amiri, Cairo, Noto Naskh Arabic (all include basic Latin).

Still, register a Latin backup (e.g. DejaVuSans or Roboto) for safety, and a bold variant for headers.

from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
import os

fonts_dir = os.path.join(current_app.root_path, 'static', 'fonts')

pdfmetrics.registerFont(TTFont('Amiri', os.path.join(fonts_dir, 'Amiri-Regular.ttf')))
pdfmetrics.registerFont(TTFont('Amiri-Bold', os.path.join(fonts_dir, 'Amiri-Bold.ttf')))
pdfmetrics.registerFont(TTFont('DejaVuSans', os.path.join(fonts_dir, 'DejaVuSans.ttf')))

# optional: make a family so bold styles work naturally
from reportlab.pdfbase import pdfmetrics
pdfmetrics.registerFontFamily('Amiri',
    normal='Amiri',
    bold='Amiri-Bold',
    italic='Amiri',  # supply if you have it
    boldItalic='Amiri-Bold'  # supply if you have it
)


If you previously switched to a font that only supports Arabic, that’s why English disappeared.

2) Only reshape the Arabic segments, not the whole string

If you run arabic_reshaper.reshape() + bidi.get_display() over a mixed string, English can be re-ordered in weird ways—or lost—depending on config. Reshape only Arabic runs and leave Latin runs unchanged.

import re
import arabic_reshaper
from bidi.algorithm import get_display

ARABIC_RE = re.compile(r'[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF]+')
reshaper = arabic_reshaper.ArabicReshaper({
    'delete_harakat': False,
    'support_ligatures': True,
    'use_unshaped_instead_of_isolated': False
})

def shape_mixed(text: str) -> str:
    # reshape only Arabic tokens
    def _reshape(m):
        return reshaper.reshape(m.group(0))
    reshaped = ARABIC_RE.sub(_reshape, text or '')
    # Set base_dir='R' so Arabic context stays RTL while leaving Latin intact
    return get_display(reshaped, base_dir='R')


Use shape_mixed() for Arabic/English plain strings before putting them into a Paragraph or table cell.

Do not post-process strings that are purely Latin codes/IDs unless you want RTL digits.

3) Auto-switch fonts inside a Paragraph for mixed content

ReportLab can switch fonts mid-run using its mini-HTML. For max fidelity, wrap Arabic segments with <font name="Amiri"> and Latin segments with <font name="DejaVuSans">. Then pass the combined string to Paragraph.

from reportlab.platypus import Paragraph
from reportlab.lib.styles import ParagraphStyle

STYLE_AR = ParagraphStyle(
    'ArabicBase', fontName='Amiri', fontSize=10, alignment=2  # 2 = RIGHT
)
STYLE_LTR = ParagraphStyle(
    'LatinBase', fontName='DejaVuSans', fontSize=10, alignment=0  # 0 = LEFT
)

def html_mixed(text: str) -> str:
    # tag Arabic vs Latin chunks with font tags
    parts = []
    last = 0
    for m in ARABIC_RE.finditer(text):
        # Latin chunk before Arabic
        if m.start() > last:
            latin = text[last:m.start()]
            parts.append(f'<font name="DejaVuSans">{latin}</font>')
        # Arabic chunk, apply shaping
        ar = shape_mixed(m.group(0))
        parts.append(f'<font name="Amiri">{ar}</font>')
        last = m.end()
    # trailing Latin
    if last < len(text):
        parts.append(f'<font name="DejaVuSans">{text[last:]}</font>')
    return ''.join(parts) if parts else f'<font name="DejaVuSans">{text}</font>'

# Usage in a cell:
Paragraph(html_mixed("TEST-001 German Shepherd - الكلب رقم 1"), STYLE_AR)


In tables, wrap every cell value with Paragraph(html_mixed(value), STYLE_AR).

Keep table alignment RIGHT overall for Arabic layouts; use a left-aligned style (STYLE_LTR) for columns that should stay LTR (codes/IDs/emails).

4) Keep numbers readable (Arabic-Indic vs Western digits)

If your audience prefers Western digits in mixed text, don’t transform digits. The shape_mixed() above already leaves Latin digits as-is. If you see reversals inside Arabic context, wrap those numeric tokens as Latin:

NUM_RE = re.compile(r'[0-9]+')
def tag_numbers_latin(text):
    return NUM_RE.sub(lambda m: f'<font name="DejaVuSans">{m.group(0)}</font>', text)


Then do Paragraph(tag_numbers_latin(html_mixed(value)), STYLE_AR).

5) Table styling unchanged, but cells now hold Paragraphs

Your header/background/grid TableStyle remains fine; just remember that each cell is a Paragraph with font spans, so the table’s ('FONTNAME', ...) rule is not strictly needed (or keep it—spans override it).

6) Quick checklist

 Register Amiri (or Cairo / Noto Naskh Arabic) and a Latin font.

 Don’t reshape the whole string; reshape only Arabic runs.

 Use <font name="..."> spans to ensure Latin stays Latin.

 Apply base_dir='R' in get_display.

 Use right alignment styles for Arabic columns, left for codes/IDs.

Do those, and your downloaded PDFs will keep both Arabic and English intact (and correctly aligned), while the preview remains unchanged.

FYI: the sample output you shared showed English tokens like TEST-001, German Shepherd, UNASSIGNED-001, dogy 001 jjj inside the report rows; those are exactly the cases that vanish when the entire cell is reshaped and rendered with an Arabic-only font. The approach above preserves them.