You are updating a Flask + SQLAlchemy + PostgreSQL app with Bootstrap 5 RTL (Arabic).
Implement ONE report end-to-end: **Reports → Attendance → PM Daily Report** that mirrors the paper form in "تقرير يومي لمسؤؤل المشروع-1.docx".

GOALS
- Exact Arabic RTL layout and headers as on the DOCX.
- Two side-by-side blocks (Group 1 on the left, Group 2 on the right).
- Include per-row site/shift, personal evaluation (uniform/card/appearance/cleanliness),
  dog care (exam/feed/water), training (تنشيطي/أخرى), field deployment,
  role-based performance evaluations (السائس/الكلب/المربي/الصحي/المدرب: ممتاز/جيد/ضعيف),
  and violations (text).
- Include bottom mini-rows for **on-leave employee** and **replacement employee** with dog fields.
- RBAC: GENERAL_ADMIN sees all; PROJECT_MANAGER only their projects.
- Provide UI page, API, services, PDF exporter.

========================================
A) FILES TO CREATE / UPDATE (exact paths)
========================================

1) Package: app/reports/attendance/
   - app/reports/attendance/pm_daily_routes.py     # UI routes (HTML pages)
   - app/reports/attendance/pm_daily_api.py        # JSON API for run/export
   - app/reports/attendance/pm_daily_services.py   # data provider
   - app/reports/attendance/pm_daily_exporters.py  # PDF exporter (Arabic RTL)

2) Templates:
   - templates/reports/attendance/pm_daily.html
   - templates/reports/attendance/_pm_daily_row.html  # optional partial for a row

3) Static:
   - static/js/reports_attendance_pm_daily.js

4) Models (extend if needed in the same models file created earlier):
   - app/models_attendance_reporting.py  # add PMDailyRow model (if necessary) or reuse ProjectAttendance + a PMDaily extension table

5) Migration:
   - migrations/versions/xxxx_pm_daily.py

6) Utilities (reuse if already present from Step 1):
   - app/utils/pdf_rtl.py      # rtl(text) helper + font registration (DejaVuSans or NotoSansArabic)
   - app/utils/permissions.py  # add new permission keys
   - app/utils/dates_ar.py     # return Arabic day name for date

7) Tests:
   - tests/test_reports_attendance_pm_daily.py

========================================
B) PERMISSIONS
========================================
Add granular permission keys (extend your existing system):
- "reports:attendance:pm_daily:view"
- "reports:attendance:pm_daily:export"

Decorators:
- @require_perm("reports:attendance:pm_daily:view") on UI + /run API
- @require_perm("reports:attendance:pm_daily:export") on /export API

GENERAL_ADMIN: grant both by default.
PROJECT_MANAGER: grant view by default; export only if explicitly enabled.

========================================
C) DATABASE (minimal additions)
========================================
We will keep it minimal and leverage ProjectAttendance rows for “who/where/when”.
Create a small extension table for per-row PM evaluations to avoid polluting core attendance:

Model: PMDailyEvaluation
- __tablename__ = "pm_daily_evaluation"
- id: UUID pk
- project_id: UUID FK → project.id (NOT NULL)
- date: Date (NOT NULL)
- group_no: Integer (1 or 2)   # left/right block placement
- seq_no: Integer (print order within group)
- employee_id: UUID FK → employee.id (nullable; empty if this row is a special bottom line)
- dog_id: UUID FK → dog.id (nullable)

# Per-row fields mapped from DOCX columns:
- site_name: String(120)            # "موقع الدوام"
- shift_name: String(60)            # "الفترة"

# Personal evaluation (تقييم الفرد):
- uniform_ok: Boolean               # "الزي" (checked when OK)
- card_ok: Boolean                  # "البطاقة"
- appearance_ok: Boolean            # "المظهر"
- cleanliness_ok: Boolean           # "النظافة"

# Dog care:
- dog_exam_done: Boolean            # "فحص الكلب"
- dog_fed: Boolean                  # "تغذية الكلب"
- dog_watered: Boolean              # "سقاية الكلب"

# Training:
- training_tansheti: Boolean        # "تنشيطي"
- training_other: Boolean           # "أخرى"

# Field deployment:
- field_deployment_done: Boolean    # "نزول ميداني" (single boolean)

# Role-based performance (text: "ممتاز / جيد / ضعيف"):
- perf_sais: String(10)   # "السائس"
- perf_dog: String(10)    # "الكلب"
- perf_murabbi: String(10)# "المربي"
- perf_sehi: String(10)   # "الصحي"
- perf_mudarrib: String(10)# "المدرب"

# Violations (free text):
- violations: Text

# Special bottom lines (seen in DOCX):
# Row 7: "اسم الفرد المأجز" + dog name + same columns of checkboxes (we accept checkboxes here too)
- is_on_leave_row: Boolean (default False)
- on_leave_employee_id: UUID FK → employee.id (nullable)
- on_leave_dog_id: UUID FK → dog.id (nullable)
- on_leave_type: Enum(ANNUAL,SICK,EMERGENCY,OTHER) nullable
- on_leave_note: String(250) nullable

# Row 8: "اسم الفرد البديل" + "اسم الكلب البديل"
- is_replacement_row: Boolean (default False)
- replacement_employee_id: UUID FK → employee.id (nullable)
- replacement_dog_id: UUID FK → dog.id (nullable)

# Auditing:
- created_at, updated_at

Indexes:
- ix_pm_daily_project_date (project_id, date)
- ix_pm_daily_group_seq (project_id, date, group_no, seq_no)

Create Alembic migration (xxxx_pm_daily.py):
- Create pm_daily_evaluation with all FKs, indexes, and timestamps.
- Downgrade must drop indexes then table.

NOTE:
- For “normal rows” (regular employees), data can be copied from ProjectAttendance for identity,
  but the evaluation flags live in PMDailyEvaluation.
- For “on-leave row” and “replacement row”, set is_on_leave_row True or is_replacement_row True
  and leave employee_id empty (or fill those dedicated columns).

========================================
D) BLUEPRINTS & ROUTES
========================================
Register in app/app.py (or your central factory):
- from app.reports.attendance.pm_daily_routes import bp as pm_daily_ui_bp
- from app.reports.attendance.pm_daily_api import bp as pm_daily_api_bp
- app.register_blueprint(pm_daily_ui_bp, url_prefix="/reports/attendance")
- app.register_blueprint(pm_daily_api_bp, url_prefix="/api/reports/attendance")

UI Blueprint (pm_daily_routes.py):
- name: "reports_attendance_pm_daily_ui"
- GET /pm-daily → renders templates/reports/attendance/pm_daily.html
  - Accepts query params project_id (uuid), date (YYYY-MM-DD) to prefill filters (optional).
  - Protected by @login_required + @require_perm("reports:attendance:pm_daily:view")

API Blueprint (pm_daily_api.py):
- name: "reports_attendance_pm_daily_api"

Endpoints:
1) POST /run/pm-daily
   Body: { "project_id":"<uuid>", "date":"YYYY-MM-DD" }
   Returns JSON contract EXACTLY:
   {
     "project_id": "...",
     "date": "YYYY-MM-DD",
     "day_name_ar": "الاثنين" | "...",
     "groups": [
       {
         "group_no": 1,
         "rows": [
           {
             "seq_no": 1,
             "employee_name": "...",          # or empty for special rows
             "dog_name": "...",
             "site_name": "...",
             "shift_name": "...",

             "uniform_ok": true,
             "card_ok": true,
             "appearance_ok": true,
             "cleanliness_ok": true,

             "dog_exam_done": true,
             "dog_fed": true,
             "dog_watered": true,

             "training_tansheti": false,
             "training_other": true,

             "field_deployment_done": false,

             "perf_sais": "ممتاز|جيد|ضعيف",
             "perf_dog": "ممتاز|جيد|ضعيف",
             "perf_murabbi": "ممتاز|جيد|ضعيف",
             "perf_sehi": "ممتاز|جيد|ضعيف",
             "perf_mudarrib": "ممتاز|جيد|ضعيف",

             "violations": "",

             "is_on_leave_row": false,
             "on_leave_employee_name": null,
             "on_leave_dog_name": null,
             "on_leave_type": null,
             "on_leave_note": null,

             "is_replacement_row": false,
             "replacement_employee_name": null,
             "replacement_dog_name": null
           }
         ]
       },
       { "group_no": 2, "rows": [ ...same shape... ] }
     ]
   }

2) POST /export/pdf/pm-daily
   Body: { "project_id":"<uuid>", "date":"YYYY-MM-DD" }
   Behavior:
   - Calls data provider to get the JSON contract.
   - Renders Arabic PDF exactly like the DOCX grid:
     * Top headers row in Arabic.
     * Side-by-side blocks:
       - Group 1 headers:
         ["اسم الموظف","اسم الكلب","موقع الدوام","الفترة",
          "الزي","البطاقة","المظهر","النظافة",
          "فحص الكلب","تغذية الكلب","سقاية الكلب",
          "التدريب: تنشيطي","التدريب: أخرى",
          "نزول ميداني",
          "تقييم الأداء: السائس","الكلب","المربي","الصحي","المدرب",
          "المخالفات"]
       - Group 2: same columns as Group 1.
       - Two special rows at the bottom of the page (as in DOCX):
         Row A: "اسم الفرد المأجز" + "اسم الكلب" + checkboxes + leave type + note
         Row B: "اسم الفرد البديل" + "اسم الكلب البديل" + checkboxes
     * Checkboxes drawn as □ or ■ based on booleans.
     * Performance cells accept the 3 Arabic words only (ممتاز/جيد/ضعيف).
   - Save under uploads/reports/YYYY/MM/
   - Return JSON: {"path": "uploads/reports/2025/08/pm_daily_{project_code}_{YYYYMMDD}.pdf"}

All endpoints protected:
- @login_required
- /run → @require_perm("reports:attendance:pm_daily:view")
- /export → @require_perm("reports:attendance:pm_daily:export")

========================================
E) DATA PROVIDER (pm_daily_services.py)
========================================
Function: get_pm_daily(project_id: UUID, date: date, user) -> dict

Steps:
- Validate user permission + project visibility (PROJECT_MANAGER must be assigned to the project).
- Load rows from PMDailyEvaluation for (project_id, date) ordered by group_no, seq_no.
  - If none exist, synthesize a minimal placeholder set from ProjectAttendance for that (project_id,date)
    mapping employee/dog/site/shift and leaving all flags False and text fields empty.
- For each row, resolve names (employee_name, dog_name) via joins (avoid N+1).
- Build two groups (1 & 2) with arrays "rows" in print order.
- Append two special lines at the bottom:
  - on-leave line: mark `is_on_leave_row=True`, put `on_leave_employee_name`, `on_leave_dog_name`, `on_leave_type`, `on_leave_note`.
  - replacement line: mark `is_replacement_row=True`, put `replacement_employee_name`, `replacement_dog_name`.
- Compute Arabic day name text (use a helper).
- Return JSON contract defined in (D.1).

========================================
F) PDF EXPORT (pm_daily_exporters.py)
========================================
- Use ReportLab A4 landscape (if needed) to fit the side-by-side blocks cleanly.
- Register Arabic font (DejaVuSans or NotoSansArabic) and use arabic_reshaper + python-bidi via app/utils/pdf_rtl.py rtl() helper.
- Draw:
  - Header line with "اليوم: {day_name_ar}" and "التاريخ: {DD/MM/YYYY}" on the top.
  - Two blocks (Group 1 left, Group 2 right) each with the exact header labels listed above.
  - A small spacer, then two dedicated lines for:
    * "اسم الفرد المأجز" + dog + leave type + note + the same checkboxes grid.
    * "اسم الفرد البديل" + dog + the same checkboxes grid.
- Render checkbox cells: □ for False, ■ for True.
- Ensure column widths and text are RTL-correct (draw right-to-left).

========================================
G) TEMPLATE + JS
========================================
templates/reports/attendance/pm_daily.html:
- Extends base.html.
- Title: "التقرير اليومي لمسؤول المشروع".
- Filter bar (same style as Step 1):
  - Project selector (limited to visible projects).
  - Date picker (default today).
- Two side-by-side HTML tables (or a responsive grid) that mirror the column headers.
- Bottom area shows the two special lines (on-leave / replacement).
- Buttons:
  - "تحديث" → calls /api/reports/attendance/run/pm-daily
  - "تصدير PDF" → calls /api/reports/attendance/export/pdf/pm-daily

static/js/reports_attendance_pm_daily.js:
- On load or filter change, POST to /api/reports/attendance/run/pm-daily and render the two groups + special lines.
- On export click, POST to export and then open/download the returned path.

========================================
H) NAVIGATION
========================================
Add a new menu item under Reports → Attendance:
- "PM Daily Report" → /reports/attendance/pm-daily

========================================
I) TEST
========================================
tests/test_reports_attendance_pm_daily.py:
- Login as GENERAL_ADMIN.
- Seed a project + a few employees + dogs.
- Insert a few PMDailyEvaluation rows for group 1 & 2 (and one on-leave + one replacement row).
- POST /api/reports/attendance/run/pm-daily → assert correct JSON shape and counts.
- POST /api/reports/attendance/export/pdf/pm-daily → assert "path" and file existence.

========================================
J) QUALITY & NOTES
========================================
- Keep docstrings and type hints.
- Use eager loading to avoid N+1 (joinedload on employee, dog, project).
- Validate inputs; return 400 if missing project_id/date, 403 if no permission, 404 if project not visible.
- Arabic strings must match exactly:
  Headers to use:
   - "موقع الدوام", "الفترة"
   - تقييم الفرد: "الزي","البطاقة","المظهر","النظافة"
   - الكلب: "فحص الكلب","تغذية الكلب","سقاية الكلب"
   - التدريب: "تنشيطي","أخرى"
   - "نزول ميداني"
   - تقييم الأداء: "السائس","الكلب","المربي","الصحي","المدرب"
   - "المخالفات"
   - أسفل النموذج: "اسم الفرد المأجز","اسم الكلب","نوع الإجازة","ملاحظة"
                   "اسم الفرد البديل","اسم الكلب البديل"
- Respect RTL in both HTML and PDF.
- Save PDFs under uploads/reports/YYYY/MM/.
- Do not implement any other reports in this step.
Now implement EVERYTHING above.
