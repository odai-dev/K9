You are updating a Flask + SQLAlchemy + PostgreSQL app with Bootstrap 5 RTL (Arabic).
Implement ONE report end-to-end: **Reports → Veterinary → Daily Report** that mirrors the paper veterinary form ("تقرير اليومي الصحي-1.docx").

GOALS
- Arabic RTL, print-ready veterinary report for a single day/project.
- Capture each dog’s health checkup, diagnosis, treatment, medications, costs.
- Provide API + UI + PDF exporter.
- Respect RBAC: GENERAL_ADMIN sees all; PROJECT_MANAGER only assigned projects.
- Reverse the table columns order so first header appears at the rightmost side for Arabic reading.

========================================
A) FILES TO CREATE / UPDATE
========================================
1) Package: app/reports/veterinary/
   - app/reports/veterinary/daily_routes.py       # UI
   - app/reports/veterinary/daily_api.py          # JSON API
   - app/reports/veterinary/daily_services.py     # data provider
   - app/reports/veterinary/daily_exporters.py    # PDF exporter (Arabic RTL)
   - app/reports/veterinary/constants.py          # labels, enums

2) Templates:
   - templates/reports/veterinary/daily.html
   - templates/reports/veterinary/_filters.html

3) Static:
   - static/js/reports_veterinary_daily.js

4) Models:
   - Extend VeterinaryVisit if needed, otherwise reuse existing fields.
   - If missing, add: location (string), weather (string), vital_signs (JSON), notes (Text).
   - Migration: migrations/versions/xxxx_veterinary_daily.py

5) Utilities:
   - app/utils/pdf_rtl.py (reuse)
   - app/utils/permissions.py (add new permission keys)
   - app/utils/dates_ar.py (reuse)

6) Tests:
   - tests/test_reports_veterinary_daily.py

========================================
B) PERMISSIONS
========================================
Add new keys:
- "reports:veterinary:daily:view"
- "reports:veterinary:daily:export"

Decorators:
- @require_perm("reports:veterinary:daily:view") → UI and /run
- @require_perm("reports:veterinary:daily:export") → /export

GENERAL_ADMIN: grant both.
PROJECT_MANAGER: grant view; export only if enabled.

========================================
C) DATABASE
========================================
Model: VeterinaryVisit (extend if not already present):
- id (UUID pk)
- project_id (UUID FK)
- dog_id (UUID FK)
- vet_id (UUID FK to Employee with role Veterinarian)
- project_id (UUID FK to Project, nullable)
- visit_type (Enum: ROUTINE, EMERGENCY, VACCINATION)
- visit_date (DateTime)
- diagnosis (Text)
- treatment (Text)
- medications (JSON array: [{name,dose,frequency}])
- cost (Float)
- location (String 120, optional)
- weather (String 80, optional)
- vital_signs (JSON: {temp,hr,resp,…}, optional)
- notes (Text)

Indexes to add if missing:
- ix_vetvisit_project_date (project_id, visit_date)
- ix_vetvisit_dog_date (dog_id, visit_date)

Migration: xxxx_veterinary_daily.py to add new optional fields.

========================================
D) BLUEPRINTS & ROUTES
========================================
Register in app/app.py:
- from app.reports.veterinary.daily_routes import bp as vet_daily_ui_bp
- from app.reports.veterinary.daily_api import bp as vet_daily_api_bp
- app.register_blueprint(vet_daily_ui_bp, url_prefix="/reports/veterinary")
- app.register_blueprint(vet_daily_api_bp, url_prefix="/api/reports/veterinary")

UI Blueprint (daily_routes.py):
- GET /daily → templates/reports/veterinary/daily.html
- Protected with @login_required + @require_perm("reports:veterinary:daily:view")

API Blueprint (daily_api.py):
- POST /run/daily
  Body: {project_id,date,vet_id?,dog_id?,visit_type?}
  Returns JSON contract (below).
- POST /export/pdf/daily
  Same body. Generates PDF.

========================================
E) JSON CONTRACT (API /run/daily)
========================================
{
  "project_id": "...",
  "date": "YYYY-MM-DD",
  "day_name_ar": "الثلاثاء",
  "filters_applied": {...},

  "visits": [
    {
      "time": "HH:MM",
      "dog_name": "...",
      "breed": "...",
      "vet_name": "...",
      "visit_type_ar": "روتينية|طارئة|تحصين",
      "diagnosis": "...",
      "treatment": "...",
      "medications": "اسم1 (جرعة)؛ اسم2 (جرعة)...",
      "cost": 45.0,
      "location": "...",
      "weather": "...",
      "vital_signs": {"temp": 38.5,"hr":80,"resp":20},
      "notes": "..."
    }
  ],

  "kpis": {
    "total_visits": 12,
    "unique_dogs": 7,
    "total_cost": 320.5,
    "emergencies": 2,
    "vaccinations": 4
  }
}

========================================
F) DATA PROVIDER (daily_services.py)
========================================
Function: get_vet_daily(project_id,date,vet_id?,dog_id?,visit_type?,user) -> dict

Steps:
- Validate RBAC: ADMIN can see all, PM only own project(s).
- Query VeterinaryVisit for the date and filters.
- Join dogs, vet employees, project.
- Map enums to Arabic:
  ROUTINE→"روتينية", EMERGENCY→"طارئة", VACCINATION→"تحصين".
- Flatten meds JSON into string "Name (dose×freq); …".
- Build visits list ordered by time.
- Compute KPIs.
- Return contract above.

========================================
G) PDF EXPORT (daily_exporters.py)
========================================
Function export_vet_daily_pdf(data: dict) -> str

- Use ReportLab A4 portrait, rtl() helper.
- Header line: "اليوم: {day_ar}"  "التاريخ: {dd/mm/yyyy}"  "المشروع: {project_name}"
- Table with Arabic headers (columns, RIGHT to LEFT):
  ["الوقت","اسم الكلب","السلالة","الطبيب","نوع الزيارة",
   "التشخيص","العلاج","الأدوية","التكلفة","الموقع","الطقس","العلامات الحيوية","ملاحظات"]
- Render each visit row accordingly.
- Numeric fields aligned center.
- Add KPIs summary block at bottom.
- Save under uploads/reports/YYYY/MM/vet_daily_{project}_{YYYYMMDD}.pdf
- Return {"path": "..."}.

========================================
H) TEMPLATE + JS
========================================
templates/reports/veterinary/daily.html:
- Extends base.html.
- Title: "التقرير اليومي الصحي".
- Filter bar with: project selector, date picker, vet select, dog select, visit type select.
- KPIs row.
- Table (headers listed above, in reversed order for RTL).
- Buttons: "تحديث", "تصدير PDF".

static/js/reports_veterinary_daily.js:
- On filter change, call /api/reports/veterinary/run/daily, render table + KPIs.
- On export, call /api/reports/veterinary/export/pdf/daily, open PDF.

========================================
I) NAVIGATION
========================================
Add Reports → Veterinary → "Daily Report" linking to /reports/veterinary/daily.

========================================
J) TESTS
========================================
tests/test_reports_veterinary_daily.py:
- Seed project, dogs, vet employees, visits.
- POST /api/reports/veterinary/run/daily → assert correct JSON.
- POST /api/reports/veterinary/export/pdf/daily → assert path exists.

========================================
K) QUALITY & NOTES
========================================
- Validate project_id/date; 400 on missing; 403 if no permission; 404 if project not visible.
- Use eager loading to avoid N+1.
- Use RTL layout in both HTML and PDF.
- Reverse table columns in both HTML template and PDF drawing, so first column header ("الوقت") is rightmost and last ("ملاحظات") is leftmost, matching Arabic reading order.
- Keep code modular, docstrings, type hints.
- Save PDFs under uploads/reports/YYYY/MM/.

Now implement EVERYTHING above.
