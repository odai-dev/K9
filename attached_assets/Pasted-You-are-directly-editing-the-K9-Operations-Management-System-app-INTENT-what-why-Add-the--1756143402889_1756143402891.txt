You are directly editing the K9 Operations Management System app.

INTENT (what & why)
- Add the **Grooming** tab under Breeding (التربية) to capture routine dog care:
  • Washed/bathed, shampoo type
  • Brushing
  • Nail trimming
  • Teeth brushing
  • Ear cleaning
  • Eye cleaning
  • Overall cleanliness score (1–5)
  • Notes
- Per dog & time, per project, with recorder (employee/user), fully Arabic UI & enum values.
- This powers later hygiene/quality reports and helps correlate with health issues.

================================================
STEP 1 — MODEL & MIGRATION (models.py + alembic)
================================================
Append to models.py (use ARABIC strings for enum values; keep Python identifiers ASCII-safe):

import enum
from datetime import datetime
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy import UniqueConstraint
from sqlalchemy import orm as sa

# ---------- Arabic enums (stored values are Arabic) ----------
class YesNo(enum.Enum):
    نعم = "نعم"
    لا = "لا"

class CleanlinessScore(enum.Enum):  # 1..5 stars/levels
    درجة1 = "1"
    درجة2 = "2"
    درجة3 = "3"
    درجة4 = "4"
    درجة5 = "5"

# ---------- GroomingLog (per action/event) ----------
class GroomingLog(db.Model):
    __tablename__ = "grooming_log"

    id = db.Column(UUID(as_uuid=True), primary_key=True, default=uuid4)

    project_id = db.Column(UUID(as_uuid=True), db.ForeignKey("project.id", ondelete="CASCADE"), nullable=False)
    date = db.Column(db.Date, nullable=False)
    time = db.Column(db.Time, nullable=False)

    dog_id = db.Column(UUID(as_uuid=True), db.ForeignKey("dog.id", ondelete="CASCADE"), nullable=False)
    recorder_employee_id = db.Column(UUID(as_uuid=True), db.ForeignKey("employee.id", ondelete="SET NULL"), nullable=True)

    # Actions
    غسل_الكلب = db.Column(db.Enum(YesNo), nullable=True)             # Washed/Bathed
    نوع_الشامبو = db.Column(db.String(120), nullable=True)          # Shampoo type (free text)
    تمشيط = db.Column(db.Enum(YesNo), nullable=True)                 # Brushing
    قص_الأظافر = db.Column(db.Enum(YesNo), nullable=True)            # Nail trim
    فرش_الأسنان = db.Column(db.Enum(YesNo), nullable=True)           # Teeth brush
    تنظيف_الأذن = db.Column(db.Enum(YesNo), nullable=True)           # Ear cleaning
    تنظيف_العين = db.Column(db.Enum(YesNo), nullable=True)           # Eye cleaning

    نظافة_عامه = db.Column(db.Enum(CleanlinessScore), nullable=True) # Overall cleanliness 1..5
    ملاحظات = db.Column(db.Text, nullable=True)

    created_by_user_id = db.Column(db.Integer, db.ForeignKey("user.id", ondelete="SET NULL"), nullable=True)
    created_at = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, nullable=False, default=datetime.utcnow, onupdate=datetime.utcnow)

    __table_args__ = (
        sa.Index("ix_grooming_project_date", "project_id", "date"),
        sa.Index("ix_grooming_dog_datetime", "dog_id", "date", "time"),
        UniqueConstraint("project_id","dog_id","date","time", name="uq_grooming_project_dog_dt"),
    )

Create Alembic migration `migrations/versions/xxxx_breeding_grooming.py`:
- Create enums YesNo and CleanlinessScore with **Arabic** string values.
- Create `grooming_log` table and both indexes + unique constraint as defined.
- Downgrade: drop indexes, table, enums (SQLite fallback via VARCHAR if needed).

=====================
STEP 2 — PERMISSIONS
=====================
Add and seed:
- "grooming:view", "grooming:create", "grooming:edit", "grooming:delete"

Rules:
- GENERAL_ADMIN: all.
- PROJECT_MANAGER: view/create/edit within assigned projects; delete optional.

================================================
STEP 3 — NAVIGATION (Arabic, RTL)
================================================
In the **Breeding (التربية)** parent menu, add/confirm:
- **"العناية (الاستحمام)"** → `/breeding/grooming`

Breeding menu should display if the user has any Breeding permission.

=====================================
STEP 4 — ROUTES (UI pages, routes.py)
=====================================
Add @login_required pages (protect with permissions):

GET  /breeding/grooming            → render `templates/breeding/grooming_list.html` (perm "grooming:view")
GET  /breeding/grooming/new        → render `templates/breeding/grooming_form.html` (perm "grooming:create")
GET  /breeding/grooming/<id>/edit  → render same form (perm "grooming:edit")

Each page must receive:
- Visible projects (PM‑scoped), dog list (optionally filtered by project),
- Arabic choices for YesNo and CleanlinessScore.

===========================================
STEP 5 — APIs (CRUD + list, api_routes.py)
===========================================
Add @login_required endpoints; enforce PM scoping:

GET  /api/breeding/grooming/list?project_id&date_from&date_to&dog_id&page=1&per_page=50
- perm: "grooming:view"
- returns:
  {
    "items":[ {... Arabic enum strings ...} ],
    "pagination": {...},
    "kpis": {
      "total": <int>,
      "washed_yes": <count where غسل_الكلب == "نعم">,
      "brushed_yes": <count where تمشيط == "نعم">,
      "nails_yes": <count where قص_الأظافر == "نعم">,
      "teeth_yes": <count where فرش_الأسنان == "نعم">,
      "ear_yes": <count where تنظيف_الأذن == "نعم">,
      "eye_yes": <count where تنظيف_العين == "نعم">,
      "avg_cleanliness": <float 1..5 based on نظافة_عامه values>
    }
  }

POST /api/breeding/grooming
- perm: "grooming:create"
- Validate JSON:
  - project_id (uuid, required; PM must own)
  - date (YYYY-MM-DD, required)
  - time (HH:MM or HH:MM:SS, required → normalize :00)
  - dog_id (uuid, required)
  - For enum fields, values must be Arabic options: YesNo ∈ ["نعم","لا"]; CleanlinessScore ∈ ["1","2","3","4","5"]
  - نوع_الشامبو free text up to 120 chars
- Return created row (Arabic values intact)

PUT  /api/breeding/grooming/<id>   (perm "grooming:edit")
DELETE /api/breeding/grooming/<id> (perm "grooming:delete")

Use joinedload/selectinload for Dog & Project.

=========================================
STEP 6 — TEMPLATES (Arabic RTL, reversed)
=========================================
Create:

1) templates/breeding/grooming_list.html
- RTL filters: المشروع، المدة، الكلب
- KPI badges: مغسول، تمشيط، قص أظافر، فرش أسنان، تنظيف أذن/عين، ومتوسط النظافة
- Table headers in **RIGHT → LEFT order** (reverse arrays so first header is rightmost):
  [
    "التاريخ","الوقت",
    "غسل الكلب","نوع الشامبو",
    "تمشيط","قص الأظافر","فرش الأسنان","تنظيف الأذن","تنظيف العين",
    "نظافة عامة (1–5)",
    "ملاحظات",
    "الكلب","المشروع","إجراءات"
  ]
- Button: "إضافة عناية" → /breeding/grooming/new
- Include `/static/js/grooming.js`

2) templates/breeding/grooming_form.html
- RTL form groups:
  Scope: المشروع (select)، التاريخ (date)، الوقت (time)، الكلب (select)
  العناية:
    غسل الكلب (select نعم/لا)، نوع الشامبو (text, 120)
    تمشيط (select نعم/لا)
    قص الأظافر (select نعم/لا)
    فرش الأسنان (select نعم/لا)
    تنظيف الأذن (select نعم/لا)
    تنظيف العين (select نعم/لا)
    نظافة عامة (select 1..5)
  ملاحظات: textarea
- Submit via fetch (POST/PUT) with CSRF; show Arabic validation errors.

======================================
STEP 7 — STATIC JS (vanilla, CSRF)
======================================
Create `/static/js/grooming.js`:
- List page: fetch GET /api/breeding/grooming/list; render KPIs and RTL/reversed table; support filters, pagination, delete.
- Form page: submit JSON to POST/PUT; redirect to list on success.
- Include CSRF token as elsewhere.

========================================
STEP 8 — BUSINESS RULES & NOTES
========================================
- PROJECT_MANAGER can only access assigned projects.
- Normalize time to HH:MM:SS on save.
- نظافة عامة is optional; when present, compute KPI avg_cleanliness as numeric mean of values 1..5.
- Consider future rule: if غسل_الكلب == "نعم" then نوع_الشامبو should be provided (warning, not hard error).

================
STEP 9 — TESTS
================
Add `tests/test_breeding_grooming.py`:
- Seed project, dog, PM user.
- Create multiple grooming logs with varied actions.
- GET list; assert pagination and KPI calculations (washed_yes, avg_cleanliness, etc.).
- PUT edit; assert updated values.
- DELETE if permission granted.

========================
IMPORTANT RTL NOTE
========================
In ALL Breeding tables, **reverse the column order** so the first Arabic header appears at the RIGHT edge (best for Arabic reading).
